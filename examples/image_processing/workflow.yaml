apiVersion: pipeflow.dev/v1alpha1
kind: Pipeline
metadata:
  name: skimage-image-batch-processor-from-files
  version: "1.0.0"
  description: "Loads a batch of images from a directory and processes them."
spec:
  global_inputs:
    image_directory:
      description: "Path to the directory containing images to process."
      type: "string"
    image_glob_pattern:
      description: "Glob pattern to find images (e.g., '*.png', '*.jpg')."
      type: "string"
      default: "*.jpg,*.jpeg,*.png"

  steps:
    - id: "load_image_batch_from_disk"
      function: "examples.image_processing.main.load_images_from_directory"
      description: "Loads all images from a specified directory."
      inputs:
        directory_path: "$global.image_directory"
        glob_pattern: "$global.image_glob_pattern"
      pipefunc_options:
        output_name: "image_item"

    - id: "load_and_preprocess"
      function: "examples.image_processing.main.load_and_preprocess_image"
      description: "Converts an image from the batch to grayscale."
      inputs:
        image_item: "image_item"
      pipefunc_options:
        output_name: "gray_image"
        mapspec: "image_item[n] -> gray_image[n]"

    - id: "segment"
      function: "examples.image_processing.main.segment_image"
      inputs:
        gray_image: "load_and_preprocess" # This refers to the output "gray_image"
      pipefunc_options:
        output_name: "segmented_image"
        mapspec: "gray_image[n] -> segmented_image[n]"

    - id: "extract_features"
      function: "examples.image_processing.main.extract_feature"
      inputs:
        segmented_image: "segment"
      pipefunc_options:
        output_name: "feature"
        mapspec: "segmented_image[n] -> feature[n]"

    - id: "classify"
      function: "examples.image_processing.main.classify_object"
      inputs:
        feature: "extract_features"
      pipefunc_options:
        output_name: "classification"
        mapspec: "feature[n] -> classification[n]"

    - id: "aggregate_results"
      function: "examples.image_processing.main.aggregate_results"
      inputs:
        classification: "classify"
      pipefunc_options:
        output_name: "summary"

  pipeline_outputs:
    - "aggregate_results.summary"